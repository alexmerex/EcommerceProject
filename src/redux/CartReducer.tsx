import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { ProductListParams, CartItem, CartState } from "../TypesCheck/productCartTypes";

const initialState: CartState = {
    cart: [],
    length: 0,
    totalPrice: 0,
};

export const CartSlide = createSlice({
    name: "cart",
    initialState,
    reducers: {
        // ‚úÖ Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
        addToCart: (state, action: PayloadAction<ProductListParams>) => {
            try {
                const existingItem = state.cart.find(item => item._id === action.payload._id);
                if (!existingItem) {
                    state.cart.push({ ...action.payload, quantity: 1 });
                } else {
                    existingItem.quantity += 1;
                }
                state.length = state.cart.length;
                state.totalPrice += action.payload.price;
                console.log("üõí Added to cart:", action.payload.name, "Total:", state.totalPrice);
            } catch (error) {
                console.error("‚ùå Error in addToCart:", error);
            }
        },

        // ‚úÖ TƒÉng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
        increaseQuantity: (state, action: PayloadAction<string>) => {
            try {
                const item = state.cart.find(item => item._id === action.payload);
                if (item) {
                    item.quantity += 1;
                    state.totalPrice += item.price;
                    console.log(`‚ûï Increased quantity of ${item.name} to ${item.quantity}`);
                }
            } catch (error) {
                console.error("‚ùå Error in increaseQuantity:", error);
            }
        },

        // ‚úÖ Gi·∫£m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
        decreaseQuantity: (state, action: PayloadAction<string>) => {
            try {
                const item = state.cart.find(item => item._id === action.payload);
                if (item) {
                    if (item.quantity > 1) {
                        item.quantity -= 1;
                        state.totalPrice -= item.price;
                        console.log(`‚ûñ Decreased quantity of ${item.name} to ${item.quantity}`);
                    } else {
                        state.cart = state.cart.filter(i => i._id !== action.payload);
                        console.log(`‚ùå Removed ${item.name} from cart`);
                    }
                }
                state.length = state.cart.length;
            } catch (error) {
                console.error("‚ùå Error in decreaseQuantity:", error);
            }
        },

        // ‚úÖ X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
        removeFromCart: (state, action: PayloadAction<string>) => {
            try {
                const item = state.cart.find(item => item._id === action.payload);
                if (item) {
                    state.cart = state.cart.filter(i => i._id !== action.payload);
                    state.totalPrice -= item.price * item.quantity;
                    console.log(`üóëÔ∏è Removed ${item.name} from cart`);
                }
                state.length = state.cart.length;
            } catch (error) {
                console.error("‚ùå Error in removeFromCart:", error);
            }
        },

        // ‚úÖ X√≥a to√†n b·ªô gi·ªè h√†ng
        clearCart: (state) => {
            try {
                state.cart = [];
                state.length = 0;
                state.totalPrice = 0;
                console.log("üõí Cart cleared!");
            } catch (error) {
                console.error("‚ùå Error in clearCart:", error);
            }
        }
    }
});

// Export c√°c action ƒë·ªÉ s·ª≠ d·ª•ng trong component React
export const { addToCart, increaseQuantity, decreaseQuantity, removeFromCart, clearCart } = CartSlide.actions;

// Export reducer ƒë·ªÉ t√≠ch h·ª£p v√†o Redux store
export default CartSlide.reducer;
