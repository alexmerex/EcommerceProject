import { Request, Response } from 'express';
import { PRODUCTS } from '../Models/ProductModel';
import { ProductParams } from '../dto/Product';

const path = 'http://localhost:9000/assets/';

export const createProduct = async (req: Request, res: Response): Promise<void> => {
    try {
        const { name, price, oldPrice, description, quantity, inStock, isFeatured, category } = req.body as ProductParams;

        if (!name || !price || !category) {
            res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin s·∫£n ph·∫©m." });
            return;
        }

        // L·∫•y danh s√°ch ·∫£nh t·ª´ req.files
        const files = req.files as Express.Multer.File[];
        const images = files?.map(file => path + file.filename) || [];

        const product = new PRODUCTS({
            name,
            images,
            price,
            oldPrice,
            description,
            quantity,
            inStock,
            isFeatured,
            category
        });

        await product.save();
        res.status(201).json({ message: "S·∫£n ph·∫©m ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!", product });
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫°o s·∫£n ph·∫©m:", error);
        res.status(500).json({ message: "L·ªói server khi t·∫°o s·∫£n ph·∫©m.", error });
    }
};

export const getProductByCatID = async (req: Request, res: Response): Promise<void> => {
    try {
        const { CatID } = req.params;
        if (!CatID) {
            res.status(400).json({ message: "Thi·∫øu m√£ danh m·ª•c s·∫£n ph·∫©m." });
            return;
        }

        console.log(`üîç T√¨m s·∫£n ph·∫©m theo danh m·ª•c: ${CatID}`);
        const result = await PRODUCTS.find({ category: CatID });

        if (!result.length) {
            res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o trong danh m·ª•c n√†y." });
            return;
        }

        res.status(200).json(result);
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m theo danh m·ª•c:", error);
        res.status(500).json({ message: "L·ªói server khi l·∫•y s·∫£n ph·∫©m theo danh m·ª•c.", error });
    }
};

export const getProductByID = async (req: Request, res: Response): Promise<void> => {
    try {
        const { id } = req.params;
        if (!id) {
            res.status(400).json({ message: "Thi·∫øu ID s·∫£n ph·∫©m." });
            return;
        }

        const product = await PRODUCTS.findById(id);
        if (!product) {
            res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m." });
            return;
        }

        res.status(200).json(product);
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m theo ID:", error);
        res.status(500).json({ message: "L·ªói server khi l·∫•y s·∫£n ph·∫©m theo ID.", error });
    }
};

export const getAllProducts = async (req: Request, res: Response): Promise<void> => {
    try {
        const products = await PRODUCTS.find().sort({ createdAt: -1 });

        if (!products.length) {
            res.status(404).json({ message: "Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o." });
            return;
        }

        res.status(200).json(products);
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m:", error);
        res.status(500).json({ message: "L·ªói server khi l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m.", error });
    }
};

export const getFeaturedProducts = async (req: Request, res: Response): Promise<void> => {
    try {
        const featuredProducts = await PRODUCTS.find({ isFeatured: true });

        if (!featuredProducts.length) {
            res.status(404).json({ message: "Kh√¥ng c√≥ s·∫£n ph·∫©m n·ªïi b·∫≠t." });
            return;
        }

        res.status(200).json(featuredProducts);
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m n·ªïi b·∫≠t:", error);
        res.status(500).json({ message: "L·ªói server khi l·∫•y s·∫£n ph·∫©m n·ªïi b·∫≠t.", error });
    }
};
